#define _CRT_SECURE_NO_WARNINGS 1
#define _WINSOCK_DEPRECATED_NO_WARNINGS 1

#include <pthread.h>
#include <semaphore.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <vector>

#define TRUE 1
#define FALSE 0

#define SUCCESS 0
#define FAILURE -1

#define SLEEPING 0
#define WORKING 1

#define WAITING 0
#define ATTENDED 1

// Set TRUE or FALSE to show or not Debug Prints
#define DEBUG_MODE TRUE

int s_getvalue(sem_t *sem)
{
	int val1;
	sem_getvalue(sem, &val1);
	return val1;
}

#pragma region Structs
struct customer_pack;
struct barber_pack;

typedef struct struct_semaphore
{
	sem_t semaphore;
} struct_semaphore;

typedef struct customer_pack
{
	pthread_t thread_id;
	int id;

	struct barber_pack *array_barbers; // Array of Barbers 
	int num_barbers; // Size of array_barbers

	struct_semaphore *chairs_customers;    // Control the number of waiting chairs that are NOT occupied. Ex: If initialized value is 10, in a certain point the value is 6, means that 4 clients are waiting and 6 chairs are free.
	struct_semaphore *sleeping_barbers;    // Control the number of sleeping barbers. Ex: If value is 2, there are 2 barbers that are sleeping.
	pthread_mutex_t *barber_verifier;      // Mutex to block 1 customer to verify which barber is sleeping on array_barbers
	
	pthread_cond_t haircut_signal;         // Conditional to Signalize Customer that Haircut is Done
	pthread_mutex_t haircut_signal_helper; // Mutex that helps haircut_signal
} customer_pack;

typedef struct barber_pack
{
	pthread_t thread_id;
	int id;

	struct_semaphore *chairs_customers; // Control the number of waiting chairs that are NOT occupied. Ex: If initialized value is 10, in a certain point the value is 6, means that 4 clients are waiting and 6 chairs are free.
	struct_semaphore *sleeping_barbers; // Control the number of sleeping barbers. Ex: If value is 2, there are 2 barbers that are sleeping.
	struct customer_pack *customer;     // Customer Instance - Reference to the customer that is going to be attended

	pthread_cond_t time_to_work_signal;         // Conditional to Signalize Barber that is time to work
	pthread_mutex_t time_to_work_signal_helper; // Mutex that helps time_to_work_signal

	struct_semaphore *barber_work_not_done;   // Control the number of barbers with work not done. If this arrives to 0, means that every barber finished his work.
	pthread_mutex_t *mutex_shared_objectives; // Mutex that helps barber_work_not_done.

	struct_semaphore status_working; // Control if a specific barber is working or sleeping. Busy = 0, sleeping = 1;
	int num_chairs;
	int num_barbers;
	int objective;
	int done;
	int finished;
} barber_pack;

#pragma region Fill Structs
void fill_barber_pack(barber_pack *array_barbers, struct_semaphore *chairs_customers, struct_semaphore *sleeping_barbers, int num_barbers, int num_chairs, int min_attended, struct_semaphore *barber_work_not_done, pthread_mutex_t *mutex_shared_objectives)
{
	for (int i = 0; i < num_barbers; i++)
	{
		array_barbers[i].id = i;
		array_barbers[i].chairs_customers = chairs_customers;
		array_barbers[i].sleeping_barbers = sleeping_barbers;
		array_barbers[i].barber_work_not_done = barber_work_not_done;
		array_barbers[i].mutex_shared_objectives = mutex_shared_objectives;
		array_barbers[i].finished = FALSE;

		array_barbers[i].time_to_work_signal = PTHREAD_COND_INITIALIZER;
		array_barbers[i].time_to_work_signal_helper = PTHREAD_MUTEX_INITIALIZER;

		array_barbers[i].num_barbers = num_barbers;
		array_barbers[i].num_chairs = num_chairs;
		array_barbers[i].objective = min_attended;
		array_barbers[i].done = 0;

		sem_init(&array_barbers[i].status_working.semaphore, 0, 1);
	}
}
#pragma endregion

#pragma region Threads
void *customer(void *thread_pack)
{
	customer_pack *customer_pack = (struct customer_pack*) thread_pack; // customer instance
	int response_code;
	
	#if DEBUG_MODE
	//printf("Customer %d: Thread Started. FC: %d, SB: %d \n", customer_pack->id, s_getvalue(&customer_pack->chairs_customers->semaphore), s_getvalue(&customer_pack->sleeping_barbers->semaphore));
	#endif	

	// Try to get a waiting chair
	response_code = sem_trywait(&(customer_pack->chairs_customers->semaphore));
	
	// If not avaible, go away
	if (response_code == FAILURE)
	{
		#if DEBUG_MODE
		//printf("Customer %d: Fail to get a chair. The barbershop is full. FC: %d, SB: %d --- thread_id.p: %p \n", customer_pack->id, s_getvalue(&customer_pack->chairs_customers->semaphore), s_getvalue(&customer_pack->sleeping_barbers->semaphore), customer_pack->thread_id.p);
		#endif

		pthread_cancel(customer_pack->thread_id);
		return NULL;
	}

	#if DEBUG_MODE
	// Get Free chairs
	printf("Customer %d: Is waiting on a chair. FC: %d, SB: %d \n", customer_pack->id, s_getvalue(&customer_pack->chairs_customers->semaphore), s_getvalue(&customer_pack->sleeping_barbers->semaphore));
	#endif

	// Verify if there is any barber sleeping, if it has, continue
	sem_wait(&customer_pack->sleeping_barbers->semaphore);

	#if DEBUG_MODE
	// Get Free chairs
	printf("Customer %d: Pelo jeito tem um barbeiro dormindo!! FC: %d, SB: %d \n", customer_pack->id, s_getvalue(&customer_pack->chairs_customers->semaphore), s_getvalue(&customer_pack->sleeping_barbers->semaphore));
	#endif

	#pragma region Critical Region : barber_verifier
	// Lock to verify which one is sleeping
	pthread_mutex_lock(customer_pack->barber_verifier);

	int pos = -1;
	barber_pack *array_barbers = customer_pack->array_barbers;
	for (int i = 0; i < customer_pack->num_barbers; i++) 
	{
		response_code = sem_trywait(&array_barbers[i].status_working.semaphore);

		if (response_code == SUCCESS) {
			array_barbers[i].customer = customer_pack;
			pos = i;

			#if DEBUG_MODE
			printf("Customer %d: Is going to be attended by Barber %d! FC: %d, SB: %d \n", customer_pack->id, array_barbers[i].id, s_getvalue(&customer_pack->chairs_customers->semaphore), s_getvalue(&customer_pack->sleeping_barbers->semaphore));
			#endif

			break;
		}
	}

	// Unlock
	pthread_mutex_unlock(customer_pack->barber_verifier);
	#pragma endregion

	// Wakes the barber and get a haircut
	pthread_cond_signal(&array_barbers[pos].time_to_work_signal);

	#if DEBUG_MODE
	printf("Customer %d: Signaling Barber %d! FC: %d, SB: %d \n", customer_pack->id, customer_pack->array_barbers[pos].id, s_getvalue(&customer_pack->chairs_customers->semaphore), s_getvalue(&customer_pack->sleeping_barbers->semaphore));
	#endif

	// Wait signal until haircut is done
	pthread_mutex_lock(&customer_pack->haircut_signal_helper);
	pthread_cond_wait(&customer_pack->haircut_signal, &customer_pack->haircut_signal_helper);
	pthread_mutex_unlock(&customer_pack->haircut_signal_helper);

	#if DEBUG_MODE
	printf("Customer %d: Haircut is done! Leaving barbershop. FC: %d, SB: %d \n", customer_pack->id, s_getvalue(&customer_pack->chairs_customers->semaphore), s_getvalue(&customer_pack->sleeping_barbers->semaphore));
	#endif
	
	pthread_exit(&response_code);
	return NULL;
}

void *barber(void *thread_pack)
{
	barber_pack *barber_pack = (struct barber_pack*) thread_pack; // barber instance

	#if DEBUG_MODE
	printf("Barber %d: Thread Started. FC: %d, SB: %d \n", barber_pack->id, s_getvalue(&barber_pack->chairs_customers->semaphore), s_getvalue(&barber_pack->sleeping_barbers->semaphore));
	#endif

	//while (barber_pack->done < barber_pack->objective || work_finished > 0 || free_chair < barber_pack->num_chairs)
	while (TRUE)
	{
		#if DEBUG_MODE
		printf("Barber %d: Is sleeping. Total done: %d FC: %d, SB: %d \n", barber_pack->id, barber_pack->done, s_getvalue(&barber_pack->chairs_customers->semaphore), s_getvalue(&barber_pack->sleeping_barbers->semaphore));
		#endif

		// Stay sleeping until a customer sends a signal
		pthread_mutex_lock(&barber_pack->time_to_work_signal_helper);
		pthread_cond_wait(&barber_pack->time_to_work_signal, &barber_pack->time_to_work_signal_helper);
		pthread_mutex_unlock(&barber_pack->time_to_work_signal_helper);

		// Asks client to sit on barber chair and let a waiting chair free
		sem_post(&barber_pack->chairs_customers->semaphore);

		#if DEBUG_MODE
		// When wakes attend a customer
		printf("Barber %d: Signaled by Customer %d. FC: %d, SB: %d \n", barber_pack->id, barber_pack->customer->id, s_getvalue(&barber_pack->chairs_customers->semaphore), s_getvalue(&barber_pack->sleeping_barbers->semaphore));
		// Sleep(5); // Time Cutting Hair - FOR TESTS ONLY
		#endif
		barber_pack->done += 1;

		// Tell to customer that the haircut is done. End it and back to sleep.

		if(barber_pack->done == barber_pack->objective && !barber_pack->finished)
		{
			// Apply -1 that completed the work
			pthread_mutex_lock(barber_pack->mutex_shared_objectives);
			sem_wait(&barber_pack->barber_work_not_done->semaphore);
			pthread_mutex_unlock(barber_pack->mutex_shared_objectives);
		}

		// Signaling customer that is done
		pthread_cond_signal(&barber_pack->customer->haircut_signal);

		// Go back to sleep and Add one more barber to the not working semaphore value
		pthread_mutex_lock(barber_pack->customer->barber_verifier);
		sem_post(&barber_pack->status_working.semaphore);
		sem_post(&barber_pack->customer->sleeping_barbers->semaphore);
		pthread_mutex_unlock(barber_pack->customer->barber_verifier);

		#if DEBUG_MODE
		printf("Barber %d: Haircut is done on Customer %d. FC: %d, SB: %d \n", barber_pack->id, barber_pack->customer->id, s_getvalue(&barber_pack->chairs_customers->semaphore), s_getvalue(&barber_pack->sleeping_barbers->semaphore));
		#endif
	}

	printf(">>> Barber %d: Is CLOSED. Total done: %d, shared_objectives: %d, chairs_customers: %d #Ended\n", barber_pack->id, barber_pack->done, s_getvalue(&barber_pack->barber_work_not_done->semaphore), s_getvalue(&barber_pack->chairs_customers->semaphore));

	return NULL;
}
#pragma endregion

int main(int argc, char **argv)
{
	int num_barbers, num_chairs, min_attended;

	printf("+ Started. +\n");

	// Get Inputed Values - should get from argv[]
	num_barbers = 2;
	num_chairs = 2;	
	min_attended = 3;

	// Declare Semaphores
	struct_semaphore chairs_customers;
	struct_semaphore sleeping_barbers;
	struct_semaphore barber_work_not_done;
	pthread_mutex_t barber_verifier;
	pthread_mutex_t mutex_shared_objectives;

	// Init Semaphores
	sem_init(&chairs_customers.semaphore, 0, num_chairs);
	sem_init(&sleeping_barbers.semaphore, 0, num_barbers);
	sem_init(&barber_work_not_done.semaphore, 0, num_barbers);
	barber_verifier = PTHREAD_MUTEX_INITIALIZER;
	mutex_shared_objectives = PTHREAD_MUTEX_INITIALIZER;

	#if DEBUG_MODE
	printf("Initialized Barber Semaphore. sleeping_barbers: %p\n", (void *) sleeping_barbers.semaphore);
	printf("Initialized Customers Semaphore. chairs_customers: %p\n", (void *) chairs_customers.semaphore);
	#endif

	//Initialize Barbers
	barber_pack *array_barbers = (struct barber_pack*) malloc(sizeof(barber_pack) * (num_barbers));
	fill_barber_pack(array_barbers, &chairs_customers, &sleeping_barbers, num_barbers, num_chairs, min_attended, &barber_work_not_done, &mutex_shared_objectives);

	std::vector<pthread_t> barber_thread_id;
	for (int i = 0; i < num_barbers; i++) 
	{
		int error_thread = pthread_create(&(array_barbers[i].thread_id), NULL, barber, &(array_barbers[i]));

		// Saves Barber Thread Id
		barber_thread_id.push_back(array_barbers[i].thread_id);

		if (error_thread != 0)
		{
			printf("Fail to create Barber Thread %d\n, Error code: %d\n", array_barbers[i].id, error_thread);
			exit(-1);
		}
	}
	Sleep(1000);

	std::vector<pthread_t> customer_thread_id;
	int error_thread, response_code, j = 0, create_customer;

	pthread_mutex_lock(&mutex_shared_objectives);
	create_customer = s_getvalue(&barber_work_not_done.semaphore);
	pthread_mutex_unlock(&mutex_shared_objectives);
	int c = 3;
	while(create_customer)
	{
		// Instanciate Customers
		customer_pack *customer_pack = (struct customer_pack*) malloc(sizeof(struct customer_pack));
		customer_pack->id = j;
		customer_pack->array_barbers = array_barbers;
		customer_pack->chairs_customers = &chairs_customers;
		customer_pack->sleeping_barbers = &sleeping_barbers;
		customer_pack->num_barbers = num_barbers;
		customer_pack->haircut_signal = PTHREAD_COND_INITIALIZER;
		customer_pack->haircut_signal_helper = PTHREAD_MUTEX_INITIALIZER;
		customer_pack->barber_verifier = &barber_verifier;
		
		// Verify if there are barbers working
		pthread_mutex_lock(&mutex_shared_objectives);
		response_code = sem_trywait(&barber_work_not_done.semaphore);
		if (response_code == SUCCESS) {
			error_thread = pthread_create(&(customer_pack->thread_id), NULL, customer, customer_pack);
			customer_thread_id.push_back(customer_pack->thread_id);
			sem_post(&barber_work_not_done.semaphore);
		}
		create_customer = s_getvalue(&barber_work_not_done.semaphore);
		pthread_mutex_unlock(&mutex_shared_objectives);

		if (error_thread != 0)
		{
			printf("Fail to create Customer Thread %d\n, Error code: %d\n", customer_pack->id, error_thread);
			exit(-1);
		}
		
		j++;
	}

	printf("CHEGA DE CLIENTE\n");
	
	int total = customer_thread_id.size();
	while (customer_thread_id.size()) {
		error_thread = pthread_join(customer_thread_id[0], NULL);
		customer_thread_id.erase(customer_thread_id.begin());

		if (error_thread != 0)
		{
			printf("Fail to receive Customer Thread %d, Error code: %d\n", 0, error_thread);
			exit(-2);
		}
	}

	/*for (int i = 0; i < customer_thread_id.size(); i++) {
		error_thread = pthread_join(customer_thread_id[i], NULL);

		if (error_thread != 0)
		{
			printf("Fail to receive Customer Thread %d, Error code: %d\n", i, error_thread);
			exit(-2);
		}
	}*/

	printf("+ End of program. +\n");

	return 0;
}
